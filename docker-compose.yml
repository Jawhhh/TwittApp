version: "3.8"

networks:
  my_network:
    driver: bridge

services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: jawh
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - ./docker/postgres/volumes:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "--quiet" ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - my_network

  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=fVYPjMVSTcOl4BxRtp-nTQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9090,EXTERNAL://${HOSTNAME:-kafka-1}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - ./docker/kafka/volumes/server-1:/data/kafka-data
    networks:
      - my_network

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=fVYPjMVSTcOl4BxRtp-nTQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9090,EXTERNAL://${HOSTNAME:-kafka-2}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - ./docker/kafka/volumes/server-2:/data/kafka-data
    networks:
      - my_network

  kafka-3:
    image: bitnami/kafka:latest
    container_name: kafka-3
    ports:
      - "9096:9096"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=fVYPjMVSTcOl4BxRtp-nTQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9090,EXTERNAL://${HOSTNAME:-kafka-3}:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - ./docker/kafka/volumes/server-3:/data/kafka-data
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./docker/redis/volumes:/docker-entrypoint-initdb.d
    networks:
      - my_network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./docker/minio/volumes:/data
    command: server /data
    networks:
      - my_network

  config:
    image: jawhhh/config-server:1.1
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - my_network
      
  discovery:
    image: jawhhh/eureka-server:2.1
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      config:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8761/health" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    restart: always
    networks:
      - my_network
      
  auth:
    image: jawhhh/auth-service:2.0
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://auth:8081/api/users/health" ]
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 10s
    networks:
      - my_network
      
  profile:
    image: jawhhh/profile-service:2.0
    container_name: profile-service
    ports:
      - "8082:8082"
    depends_on:
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://profile:8082/profiles/health" ]
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 10s
    networks:
      - my_network
      
  email-notification:
    image: jawhhh/email-notification-service:2.0
    container_name: email-notification-service
    ports:
      - "8083:8083"
    depends_on:
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://email-notification:8083/mail/health" ]
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 10s
    networks:
      - my_network
      
  subscribe:
    image: jawhhh/subscribe-service:2.0
    container_name: subscribe-service
    ports:
      - "8084:8084"
    depends_on:
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://subscribe:8084/sub/profiles/health" ]
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 10s
    networks:
      - my_network
      
  post:
    image: jawhhh/post-service:2.0
    container_name: post-service
    ports:
      - "8085:8085"
    depends_on:
      discovery:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://post:8085/posts/health" ]
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 10s
    networks:
      - my_network
      
  api-gateway:
    image: jawhhh/api-gateway-server:1.3
    container_name: api-gateway-server
    ports:
      - "8080:8080"
    depends_on:
      discovery:
        condition: service_healthy
      auth:
        condition: service_healthy
      profile:
        condition: service_healthy
      email-notification:
        condition: service_healthy
      post:
        condition: service_healthy
      subscribe:
        condition: service_healthy
    networks:
      - my_network